// Mocks generated by Mockito 5.2.0 from annotations
// in homsai/test/integration/scanner/external_auth/external_auth_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:convert' as _i14;

import 'package:connectivity_plus/connectivity_plus.dart' as _i15;
import 'package:homsai/business/home_assistant/home_assistant.repository.dart'
    as _i6;
import 'package:homsai/business/home_assistant_scanner/home_assistant_scanner.repository.dart'
    as _i11;
import 'package:homsai/datastore/DTOs/remote/history/history.dto.dart' as _i8;
import 'package:homsai/datastore/DTOs/remote/history/history_body.dto.dart'
    as _i9;
import 'package:homsai/datastore/DTOs/remote/logbook/logbook.dto.dart' as _i4;
import 'package:homsai/datastore/DTOs/remote/logbook/logbook_body.dto.dart'
    as _i10;
import 'package:homsai/datastore/models/database/plant.entity.dart' as _i7;
import 'package:homsai/datastore/models/home_assistant_auth.model.dart' as _i2;
import 'package:homsai/datastore/remote/network/network.manager.dart' as _i5;
import 'package:homsai/datastore/remote/rest/remote.Interface.dart' as _i12;
import 'package:http/http.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHomeAssistantAuth_0 extends _i1.Fake
    implements _i2.HomeAssistantAuth {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeUri_2 extends _i1.Fake implements Uri {}

class _FakeLogbookDto_3 extends _i1.Fake implements _i4.LogbookDto {}

class _FakeNetworkManagerSubscribersHandler_4 extends _i1.Fake
    implements _i5.NetworkManagerSubscribersHandler {}

/// A class which mocks [HomeAssistantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeAssistantRepository extends _i1.Mock
    implements _i6.HomeAssistantRepository {
  MockHomeAssistantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.HomeAssistantAuth> authenticate(
          {Uri? baseUrl, Uri? fallback}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #authenticate, [], {#baseUrl: baseUrl, #fallback: fallback}),
              returnValue: Future<_i2.HomeAssistantAuth>.value(
                  _FakeHomeAssistantAuth_0()))
          as _i3.Future<_i2.HomeAssistantAuth>);
  @override
  _i3.Future<_i2.HomeAssistantAuth> authenticateHomeAssistant({Uri? url}) =>
      (super.noSuchMethod(
              Invocation.method(#authenticateHomeAssistant, [], {#url: url}),
              returnValue: Future<_i2.HomeAssistantAuth>.value(
                  _FakeHomeAssistantAuth_0()))
          as _i3.Future<_i2.HomeAssistantAuth>);
  @override
  _i3.Future<_i3.StreamSubscription<String>> scan(
          {void Function(String)? onData,
          Function? onError,
          Duration? timeout}) =>
      (super.noSuchMethod(
              Invocation.method(#scan, [],
                  {#onData: onData, #onError: onError, #timeout: timeout}),
              returnValue: Future<_i3.StreamSubscription<String>>.value(
                  _FakeStreamSubscription_1<String>()))
          as _i3.Future<_i3.StreamSubscription<String>>);
  @override
  _i3.Future<Uri> canConnectToHomeAssistant(
          {Uri? baseUrl,
          Uri? fallback,
          Duration? timeout = const Duration(seconds: 2)}) =>
      (super.noSuchMethod(
          Invocation.method(#canConnectToHomeAssistant, [],
              {#baseUrl: baseUrl, #fallback: fallback, #timeout: timeout}),
          returnValue: Future<Uri>.value(_FakeUri_2())) as _i3.Future<Uri>);
  @override
  _i3.Future<_i2.HomeAssistantAuth> refreshToken(
          {Uri? url, Duration? timeout = const Duration(seconds: 2)}) =>
      (super.noSuchMethod(
          Invocation.method(#refreshToken, [], {#url: url, #timeout: timeout}),
          returnValue: Future<_i2.HomeAssistantAuth>.value(
              _FakeHomeAssistantAuth_0())) as _i3
          .Future<_i2.HomeAssistantAuth>);
  @override
  _i3.Future<dynamic> revokeToken(
          {_i7.Plant? plant, Duration? timeout = const Duration(seconds: 2)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #revokeToken, [], {#plant: plant, #timeout: timeout}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<List<_i8.HistoryDto>> getHistory(
          {_i7.Plant? plant,
          _i9.HistoryBodyDto? historyBodyDto,
          Duration? timeout = const Duration(seconds: 10)}) =>
      (super.noSuchMethod(
              Invocation.method(#getHistory, [], {
                #plant: plant,
                #historyBodyDto: historyBodyDto,
                #timeout: timeout
              }),
              returnValue:
                  Future<List<_i8.HistoryDto>>.value(<_i8.HistoryDto>[]))
          as _i3.Future<List<_i8.HistoryDto>>);
  @override
  _i3.Future<_i4.LogbookDto> getLogBook(
          {_i7.Plant? plant,
          DateTime? start,
          _i10.LogbookBodyDto? logbookBodyDto}) =>
      (super.noSuchMethod(
              Invocation.method(#getLogBook, [], {
                #plant: plant,
                #start: start,
                #logbookBodyDto: logbookBodyDto
              }),
              returnValue: Future<_i4.LogbookDto>.value(_FakeLogbookDto_3()))
          as _i3.Future<_i4.LogbookDto>);
}

/// A class which mocks [HomeAssistantScannerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeAssistantScannerRepository extends _i1.Mock
    implements _i11.HomeAssistantScannerRepository {
  MockHomeAssistantScannerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<String> scanNetwork({Duration? timeout}) => (super.noSuchMethod(
      Invocation.method(#scanNetwork, [], {#timeout: timeout}),
      returnValue: Stream<String>.empty()) as _i3.Stream<String>);
  @override
  _i3.Future<Uri?> canConnectToHomeAssistant(
          {Uri? url, Duration? timeout = const Duration(seconds: 2)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #canConnectToHomeAssistant, [], {#url: url, #timeout: timeout}),
          returnValue: Future<Uri?>.value()) as _i3.Future<Uri?>);
}

/// A class which mocks [RemoteInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteInterface extends _i1.Mock implements _i12.RemoteInterface {
  MockRemoteInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> parseResponse(_i13.Response? response) =>
      (super.noSuchMethod(Invocation.method(#parseResponse, [response]),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i3.Future<Map<String, dynamic>> get(Uri? url,
          {Map<String, String>? headers,
          Duration? timeout,
          Uri? fallbackUrl}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                url
              ], {
                #headers: headers,
                #timeout: timeout,
                #fallbackUrl: fallbackUrl
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding,
          Duration? timeout,
          Uri? fallbackUrl}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding,
                #timeout: timeout,
                #fallbackUrl: fallbackUrl
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding,
          Duration? timeout,
          Uri? fallbackUrl}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding,
                #timeout: timeout,
                #fallbackUrl: fallbackUrl
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i3.Future<Map<String, dynamic>>);
  @override
  _i3.Future<Map<String, dynamic>> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding,
          Duration? timeout,
          Uri? fallbackUrl}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding,
                #timeout: timeout,
                #fallbackUrl: fallbackUrl
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i5.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.NetworkManagerSubscribersHandler get subscribersHandler =>
      (super.noSuchMethod(Invocation.getter(#subscribersHandler),
              returnValue: _FakeNetworkManagerSubscribersHandler_4())
          as _i5.NetworkManagerSubscribersHandler);
  @override
  set subscribersHandler(
          _i5.NetworkManagerSubscribersHandler? _subscribersHandler) =>
      super.noSuchMethod(
          Invocation.setter(#subscribersHandler, _subscribersHandler),
          returnValueForMissingStub: null);
  @override
  void subscribe(_i5.NetworkManagerSubscriber? subscriber) =>
      super.noSuchMethod(Invocation.method(#subscribe, [subscriber]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i5.NetworkManagerSubscriber? subscriber) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [subscriber]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<bool> isConnect() =>
      (super.noSuchMethod(Invocation.method(#isConnect, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i15.ConnectivityResult> getConnectionType() =>
      (super.noSuchMethod(Invocation.method(#getConnectionType, []),
              returnValue: Future<_i15.ConnectivityResult>.value(
                  _i15.ConnectivityResult.bluetooth))
          as _i3.Future<_i15.ConnectivityResult>);
}
