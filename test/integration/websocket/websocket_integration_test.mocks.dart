// Mocks generated by Mockito 5.2.0 from annotations
// in homsai/test/integration/websocket/websocket_integration_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:homsai/datastore/DTOs/remote/ai_service/daily_plan/daily_plan_cached.dto.dart'
    as _i9;
import 'package:homsai/datastore/DTOs/remote/ai_service/forecast/consumption_optimizations/consumption_optimizations_forecast.dto.dart'
    as _i7;
import 'package:homsai/datastore/DTOs/remote/history/history.dto.dart' as _i8;
import 'package:homsai/datastore/local/apppreferences/app_preferences.repository.dart'
    as _i2;
import 'package:homsai/datastore/models/ai_service_auth.model.dart' as _i6;
import 'package:homsai/datastore/models/home_assistant_auth.model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [AppPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPreferences extends _i1.Mock implements _i2.AppPreferences {
  MockAppPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set preferences(_i3.SharedPreferences? _preferences) =>
      super.noSuchMethod(Invocation.setter(#preferences, _preferences),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> resetHomeAssistantToken() =>
      (super.noSuchMethod(Invocation.method(#resetHomeAssistantToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setHomeAssistantToken(_i5.HomeAssistantAuth? token) =>
      super.noSuchMethod(Invocation.method(#setHomeAssistantToken, [token]),
          returnValueForMissingStub: null);
  @override
  bool canSkipIntroduction() =>
      (super.noSuchMethod(Invocation.method(#canSkipIntroduction, []),
          returnValue: false) as bool);
  @override
  _i4.Future<void> resetIntroduction() =>
      (super.noSuchMethod(Invocation.method(#resetIntroduction, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setIntroduction(bool? canSkip) =>
      super.noSuchMethod(Invocation.method(#setIntroduction, [canSkip]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetUserId() =>
      (super.noSuchMethod(Invocation.method(#resetUserId, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setUserId(String? id) =>
      super.noSuchMethod(Invocation.method(#setUserId, [id]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetAiServiceToken() =>
      (super.noSuchMethod(Invocation.method(#resetAiServiceToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setAiServicetToken(_i6.AiServiceAuth? token) =>
      super.noSuchMethod(Invocation.method(#setAiServicetToken, [token]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> logout({bool? deleteUser = true}) => (super.noSuchMethod(
      Invocation.method(#logout, [], {#deleteUser: deleteUser}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setOptimizationForecast(
          _i7.ConsumptionOptimizationsForecastDto? forecastDto) =>
      super.noSuchMethod(
          Invocation.method(#setOptimizationForecast, [forecastDto]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetOptimizationForecast() =>
      (super.noSuchMethod(Invocation.method(#resetOptimizationForecast, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setConsumptionInfo(List<_i8.HistoryDto>? consumptionInfo) => super
      .noSuchMethod(Invocation.method(#setConsumptionInfo, [consumptionInfo]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetConsumptionInfo() =>
      (super.noSuchMethod(Invocation.method(#resetConsumptionInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setProductionInfo(List<_i8.HistoryDto>? productionInfo) => super
      .noSuchMethod(Invocation.method(#setProductionInfo, [productionInfo]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetProductionInfo() =>
      (super.noSuchMethod(Invocation.method(#resetProductionInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setDailyPlan(_i9.DailyPlanCachedDto? dailyPlan) =>
      super.noSuchMethod(Invocation.method(#setDailyPlan, [dailyPlan]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> resetDailyPlan() =>
      (super.noSuchMethod(Invocation.method(#resetDailyPlan, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> resetBatteryInfo() =>
      (super.noSuchMethod(Invocation.method(#resetBatteryInfo, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setBatteryInfo(List<_i8.HistoryDto>? batteryInfo) =>
      super.noSuchMethod(Invocation.method(#setBatteryInfo, [batteryInfo]),
          returnValueForMissingStub: null);
}
