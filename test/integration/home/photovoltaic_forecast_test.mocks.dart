// Mocks generated by Mockito 5.2.0 from annotations
// in homsai/test/integration/home/photovoltaic_forecast_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:connectivity_plus/connectivity_plus.dart' as _i4;
import 'package:homsai/datastore/remote/network/network.manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNetworkManagerSubscribersHandler_0 extends _i1.Fake
    implements _i2.NetworkManagerSubscribersHandler {}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i2.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkManagerSubscribersHandler get subscribersHandler =>
      (super.noSuchMethod(Invocation.getter(#subscribersHandler),
              returnValue: _FakeNetworkManagerSubscribersHandler_0())
          as _i2.NetworkManagerSubscribersHandler);
  @override
  set subscribersHandler(
          _i2.NetworkManagerSubscribersHandler? _subscribersHandler) =>
      super.noSuchMethod(
          Invocation.setter(#subscribersHandler, _subscribersHandler),
          returnValueForMissingStub: null);
  @override
  void subscribe(_i2.NetworkManagerSubscriber? subscriber) =>
      super.noSuchMethod(Invocation.method(#subscribe, [subscriber]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i2.NetworkManagerSubscriber? subscriber) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [subscriber]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<bool> isConnect() =>
      (super.noSuchMethod(Invocation.method(#isConnect, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.ConnectivityResult> getConnectionType() =>
      (super.noSuchMethod(Invocation.method(#getConnectionType, []),
              returnValue: Future<_i4.ConnectivityResult>.value(
                  _i4.ConnectivityResult.bluetooth))
          as _i3.Future<_i4.ConnectivityResult>);
}
